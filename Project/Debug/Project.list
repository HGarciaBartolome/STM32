
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800383c  0800383c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003844  08003844  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800384c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bde3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b0c  00000000  00000000  0002be62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c48  00000000  00000000  0002d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000988  00000000  00000000  0002e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021e94  00000000  00000000  0002ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d866  00000000  00000000  00050dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6532  00000000  00000000  0005e63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000033f4  00000000  00000000  00134b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00137f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003814 	.word	0x08003814

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003814 	.word	0x08003814

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d102      	bne.n	80004da <HAL_GPIO_EXTI_Callback+0x16>
		flagmover=true;;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
	}

}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000110 	.word	0x20000110

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fd22 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f9ec 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fb2a 	bl	8000b50 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004fc:	f000 fa52 	bl	80009a4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000500:	f000 faa2 	bl	8000a48 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000504:	f000 fad6 	bl	8000ab4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Parte del coidgo para activar el acelerometro
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	48b1      	ldr	r0, [pc, #708]	; (80007d4 <main+0x2e8>)
 800050e:	f001 fa95 	bl	8001a3c <HAL_GPIO_WritePin>
  address_ctrl1 = 0x20;
 8000512:	4bb1      	ldr	r3, [pc, #708]	; (80007d8 <main+0x2ec>)
 8000514:	2220      	movs	r2, #32
 8000516:	701a      	strb	r2, [r3, #0]
  data_ctrl1 = 0x47; //Referesco a 800Hz,
 8000518:	4bb0      	ldr	r3, [pc, #704]	; (80007dc <main+0x2f0>)
 800051a:	2247      	movs	r2, #71	; 0x47
 800051c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, &address_ctrl1, 1, HAL_MAX_DELAY);
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2201      	movs	r2, #1
 8000524:	49ac      	ldr	r1, [pc, #688]	; (80007d8 <main+0x2ec>)
 8000526:	48ae      	ldr	r0, [pc, #696]	; (80007e0 <main+0x2f4>)
 8000528:	f001 ffa7 	bl	800247a <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &data_ctrl1, 1, HAL_MAX_DELAY);
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	2201      	movs	r2, #1
 8000532:	49aa      	ldr	r1, [pc, #680]	; (80007dc <main+0x2f0>)
 8000534:	48aa      	ldr	r0, [pc, #680]	; (80007e0 <main+0x2f4>)
 8000536:	f001 ffa0 	bl	800247a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	2108      	movs	r1, #8
 800053e:	48a5      	ldr	r0, [pc, #660]	; (80007d4 <main+0x2e8>)
 8000540:	f001 fa7c 	bl	8001a3c <HAL_GPIO_WritePin>

  //Inicilazion Timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000544:	48a7      	ldr	r0, [pc, #668]	; (80007e4 <main+0x2f8>)
 8000546:	f002 fd07 	bl	8002f58 <HAL_TIM_Base_Start_IT>
  initX= false; initY= false; initZ= false;
 800054a:	4ba7      	ldr	r3, [pc, #668]	; (80007e8 <main+0x2fc>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	4ba6      	ldr	r3, [pc, #664]	; (80007ec <main+0x300>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	4ba6      	ldr	r3, [pc, #664]	; (80007f0 <main+0x304>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Poner las bases si el timepo de establecimiento ha pasado
	if(flagbase== true){
 800055c:	4ba5      	ldr	r3, [pc, #660]	; (80007f4 <main+0x308>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d020      	beq.n	80005a8 <main+0xbc>
		if(initX == false){
 8000566:	4ba0      	ldr	r3, [pc, #640]	; (80007e8 <main+0x2fc>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <main+0x90>
			basex=newx;
 8000574:	4ba0      	ldr	r3, [pc, #640]	; (80007f8 <main+0x30c>)
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	4ba0      	ldr	r3, [pc, #640]	; (80007fc <main+0x310>)
 800057a:	701a      	strb	r2, [r3, #0]
		}
		if(initY == false){
 800057c:	4b9b      	ldr	r3, [pc, #620]	; (80007ec <main+0x300>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	f083 0301 	eor.w	r3, r3, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d003      	beq.n	8000592 <main+0xa6>
			basey=newx;
 800058a:	4b9b      	ldr	r3, [pc, #620]	; (80007f8 <main+0x30c>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b9c      	ldr	r3, [pc, #624]	; (8000800 <main+0x314>)
 8000590:	701a      	strb	r2, [r3, #0]
		}
		if(initZ == false){
 8000592:	4b97      	ldr	r3, [pc, #604]	; (80007f0 <main+0x304>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	f083 0301 	eor.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d003      	beq.n	80005a8 <main+0xbc>
			basez=newx;
 80005a0:	4b95      	ldr	r3, [pc, #596]	; (80007f8 <main+0x30c>)
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b97      	ldr	r3, [pc, #604]	; (8000804 <main+0x318>)
 80005a6:	701a      	strb	r2, [r3, #0]
		}
	}
	// Comprobar si ha habido un cambio en los valores
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2108      	movs	r1, #8
 80005ac:	4889      	ldr	r0, [pc, #548]	; (80007d4 <main+0x2e8>)
 80005ae:	f001 fa45 	bl	8001a3c <HAL_GPIO_WritePin>
	 changeaddress= 0x27 | 0x80;
 80005b2:	4b95      	ldr	r3, [pc, #596]	; (8000808 <main+0x31c>)
 80005b4:	22a7      	movs	r2, #167	; 0xa7
 80005b6:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi1, &changeaddress, 1, 50);
 80005b8:	2332      	movs	r3, #50	; 0x32
 80005ba:	2201      	movs	r2, #1
 80005bc:	4992      	ldr	r1, [pc, #584]	; (8000808 <main+0x31c>)
 80005be:	4888      	ldr	r0, [pc, #544]	; (80007e0 <main+0x2f4>)
 80005c0:	f001 ff5b 	bl	800247a <HAL_SPI_Transmit>
	 HAL_SPI_Receive(&hspi1, &valuechange, 1, 50);
 80005c4:	2332      	movs	r3, #50	; 0x32
 80005c6:	2201      	movs	r2, #1
 80005c8:	4990      	ldr	r1, [pc, #576]	; (800080c <main+0x320>)
 80005ca:	4885      	ldr	r0, [pc, #532]	; (80007e0 <main+0x2f4>)
 80005cc:	f002 f891 	bl	80026f2 <HAL_SPI_Receive>
	 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2108      	movs	r1, #8
 80005d4:	487f      	ldr	r0, [pc, #508]	; (80007d4 <main+0x2e8>)
 80005d6:	f001 fa31 	bl	8001a3c <HAL_GPIO_WritePin>
	//Se deben separar los bits importantes, para eso se utiliza el operador & y una mascara
	 XDA= valuechange & 0x01;
 80005da:	4b8c      	ldr	r3, [pc, #560]	; (800080c <main+0x320>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b8a      	ldr	r3, [pc, #552]	; (8000810 <main+0x324>)
 80005e6:	701a      	strb	r2, [r3, #0]
	 YDA= valuechange & 0x02;
 80005e8:	4b88      	ldr	r3, [pc, #544]	; (800080c <main+0x320>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b88      	ldr	r3, [pc, #544]	; (8000814 <main+0x328>)
 80005f4:	701a      	strb	r2, [r3, #0]
	 ZDA= valuechange & 0x04;
 80005f6:	4b85      	ldr	r3, [pc, #532]	; (800080c <main+0x320>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b85      	ldr	r3, [pc, #532]	; (8000818 <main+0x32c>)
 8000602:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Si hay nuevos valores cojerlos.
	if(XDA == 0x01){
 8000604:	4b82      	ldr	r3, [pc, #520]	; (8000810 <main+0x324>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d13c      	bne.n	8000686 <main+0x19a>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2108      	movs	r1, #8
 8000610:	4870      	ldr	r0, [pc, #448]	; (80007d4 <main+0x2e8>)
 8000612:	f001 fa13 	bl	8001a3c <HAL_GPIO_WritePin>
		 Xadr= 0x29 | 0x80;
 8000616:	4b81      	ldr	r3, [pc, #516]	; (800081c <main+0x330>)
 8000618:	22a9      	movs	r2, #169	; 0xa9
 800061a:	701a      	strb	r2, [r3, #0]
		 HAL_SPI_Transmit(&hspi1, &Xadr, 1, HAL_MAX_DELAY);
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	2201      	movs	r2, #1
 8000622:	497e      	ldr	r1, [pc, #504]	; (800081c <main+0x330>)
 8000624:	486e      	ldr	r0, [pc, #440]	; (80007e0 <main+0x2f4>)
 8000626:	f001 ff28 	bl	800247a <HAL_SPI_Transmit>
		 HAL_SPI_Receive(&hspi1, &bigX, 1,  HAL_MAX_DELAY);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2201      	movs	r2, #1
 8000630:	497b      	ldr	r1, [pc, #492]	; (8000820 <main+0x334>)
 8000632:	486b      	ldr	r0, [pc, #428]	; (80007e0 <main+0x2f4>)
 8000634:	f002 f85d 	bl	80026f2 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2108      	movs	r1, #8
 800063c:	4865      	ldr	r0, [pc, #404]	; (80007d4 <main+0x2e8>)
 800063e:	f001 f9fd 	bl	8001a3c <HAL_GPIO_WritePin>

		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4863      	ldr	r0, [pc, #396]	; (80007d4 <main+0x2e8>)
 8000648:	f001 f9f8 	bl	8001a3c <HAL_GPIO_WritePin>
		 Xadr= 0x28 | 0x80;
 800064c:	4b73      	ldr	r3, [pc, #460]	; (800081c <main+0x330>)
 800064e:	22a8      	movs	r2, #168	; 0xa8
 8000650:	701a      	strb	r2, [r3, #0]
		 HAL_SPI_Transmit(&hspi1, &Xadr, 1, HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2201      	movs	r2, #1
 8000658:	4970      	ldr	r1, [pc, #448]	; (800081c <main+0x330>)
 800065a:	4861      	ldr	r0, [pc, #388]	; (80007e0 <main+0x2f4>)
 800065c:	f001 ff0d 	bl	800247a <HAL_SPI_Transmit>
		 HAL_SPI_Receive(&hspi1, &smlX, 1, HAL_MAX_DELAY);
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2201      	movs	r2, #1
 8000666:	496f      	ldr	r1, [pc, #444]	; (8000824 <main+0x338>)
 8000668:	485d      	ldr	r0, [pc, #372]	; (80007e0 <main+0x2f4>)
 800066a:	f002 f842 	bl	80026f2 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	2108      	movs	r1, #8
 8000672:	4858      	ldr	r0, [pc, #352]	; (80007d4 <main+0x2e8>)
 8000674:	f001 f9e2 	bl	8001a3c <HAL_GPIO_WritePin>
		 newx= bigX& 0xF0;
 8000678:	4b69      	ldr	r3, [pc, #420]	; (8000820 <main+0x334>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f023 030f 	bic.w	r3, r3, #15
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b5d      	ldr	r3, [pc, #372]	; (80007f8 <main+0x30c>)
 8000684:	701a      	strb	r2, [r3, #0]
	}
	if(YDA == 0x02){
 8000686:	4b63      	ldr	r3, [pc, #396]	; (8000814 <main+0x328>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d138      	bne.n	8000700 <main+0x214>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2108      	movs	r1, #8
 8000692:	4850      	ldr	r0, [pc, #320]	; (80007d4 <main+0x2e8>)
 8000694:	f001 f9d2 	bl	8001a3c <HAL_GPIO_WritePin>
		 Yadr= 0x2B | 0x80;
 8000698:	4b63      	ldr	r3, [pc, #396]	; (8000828 <main+0x33c>)
 800069a:	22ab      	movs	r2, #171	; 0xab
 800069c:	701a      	strb	r2, [r3, #0]
		 HAL_SPI_Transmit(&hspi1, &Yadr, 1, 50);
 800069e:	2332      	movs	r3, #50	; 0x32
 80006a0:	2201      	movs	r2, #1
 80006a2:	4961      	ldr	r1, [pc, #388]	; (8000828 <main+0x33c>)
 80006a4:	484e      	ldr	r0, [pc, #312]	; (80007e0 <main+0x2f4>)
 80006a6:	f001 fee8 	bl	800247a <HAL_SPI_Transmit>
		 HAL_SPI_Receive(&hspi1, &bigY, 1, 50);
 80006aa:	2332      	movs	r3, #50	; 0x32
 80006ac:	2201      	movs	r2, #1
 80006ae:	495f      	ldr	r1, [pc, #380]	; (800082c <main+0x340>)
 80006b0:	484b      	ldr	r0, [pc, #300]	; (80007e0 <main+0x2f4>)
 80006b2:	f002 f81e 	bl	80026f2 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2108      	movs	r1, #8
 80006ba:	4846      	ldr	r0, [pc, #280]	; (80007d4 <main+0x2e8>)
 80006bc:	f001 f9be 	bl	8001a3c <HAL_GPIO_WritePin>

		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2108      	movs	r1, #8
 80006c4:	4843      	ldr	r0, [pc, #268]	; (80007d4 <main+0x2e8>)
 80006c6:	f001 f9b9 	bl	8001a3c <HAL_GPIO_WritePin>
		 Yadr= 0x2A | 0x80;
 80006ca:	4b57      	ldr	r3, [pc, #348]	; (8000828 <main+0x33c>)
 80006cc:	22aa      	movs	r2, #170	; 0xaa
 80006ce:	701a      	strb	r2, [r3, #0]
		 HAL_SPI_Transmit(&hspi1, &Yadr, 1, 50);
 80006d0:	2332      	movs	r3, #50	; 0x32
 80006d2:	2201      	movs	r2, #1
 80006d4:	4954      	ldr	r1, [pc, #336]	; (8000828 <main+0x33c>)
 80006d6:	4842      	ldr	r0, [pc, #264]	; (80007e0 <main+0x2f4>)
 80006d8:	f001 fecf 	bl	800247a <HAL_SPI_Transmit>
		 HAL_SPI_Receive(&hspi1, &smlY, 1, 50);
 80006dc:	2332      	movs	r3, #50	; 0x32
 80006de:	2201      	movs	r2, #1
 80006e0:	4953      	ldr	r1, [pc, #332]	; (8000830 <main+0x344>)
 80006e2:	483f      	ldr	r0, [pc, #252]	; (80007e0 <main+0x2f4>)
 80006e4:	f002 f805 	bl	80026f2 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2108      	movs	r1, #8
 80006ec:	4839      	ldr	r0, [pc, #228]	; (80007d4 <main+0x2e8>)
 80006ee:	f001 f9a5 	bl	8001a3c <HAL_GPIO_WritePin>
		 newy= bigY & 0xf0;
 80006f2:	4b4e      	ldr	r3, [pc, #312]	; (800082c <main+0x340>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <main+0x348>)
 80006fe:	701a      	strb	r2, [r3, #0]
	}
	if(ZDA == 0x04){
 8000700:	4b45      	ldr	r3, [pc, #276]	; (8000818 <main+0x32c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d138      	bne.n	800077a <main+0x28e>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2108      	movs	r1, #8
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <main+0x2e8>)
 800070e:	f001 f995 	bl	8001a3c <HAL_GPIO_WritePin>
		 Zadr= 0x2D | 0x80;
 8000712:	4b49      	ldr	r3, [pc, #292]	; (8000838 <main+0x34c>)
 8000714:	22ad      	movs	r2, #173	; 0xad
 8000716:	701a      	strb	r2, [r3, #0]
		 HAL_SPI_Transmit(&hspi1, &Zadr, 1, 50);
 8000718:	2332      	movs	r3, #50	; 0x32
 800071a:	2201      	movs	r2, #1
 800071c:	4946      	ldr	r1, [pc, #280]	; (8000838 <main+0x34c>)
 800071e:	4830      	ldr	r0, [pc, #192]	; (80007e0 <main+0x2f4>)
 8000720:	f001 feab 	bl	800247a <HAL_SPI_Transmit>
		 HAL_SPI_Receive(&hspi1, &bigZ, 1, 50);
 8000724:	2332      	movs	r3, #50	; 0x32
 8000726:	2201      	movs	r2, #1
 8000728:	4944      	ldr	r1, [pc, #272]	; (800083c <main+0x350>)
 800072a:	482d      	ldr	r0, [pc, #180]	; (80007e0 <main+0x2f4>)
 800072c:	f001 ffe1 	bl	80026f2 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2108      	movs	r1, #8
 8000734:	4827      	ldr	r0, [pc, #156]	; (80007d4 <main+0x2e8>)
 8000736:	f001 f981 	bl	8001a3c <HAL_GPIO_WritePin>

		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2108      	movs	r1, #8
 800073e:	4825      	ldr	r0, [pc, #148]	; (80007d4 <main+0x2e8>)
 8000740:	f001 f97c 	bl	8001a3c <HAL_GPIO_WritePin>
		 Zadr= 0x2C | 0x80;
 8000744:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <main+0x34c>)
 8000746:	22ac      	movs	r2, #172	; 0xac
 8000748:	701a      	strb	r2, [r3, #0]
		 HAL_SPI_Transmit(&hspi1, &Zadr, 1, 50);
 800074a:	2332      	movs	r3, #50	; 0x32
 800074c:	2201      	movs	r2, #1
 800074e:	493a      	ldr	r1, [pc, #232]	; (8000838 <main+0x34c>)
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <main+0x2f4>)
 8000752:	f001 fe92 	bl	800247a <HAL_SPI_Transmit>
		 HAL_SPI_Receive(&hspi1, &smlZ, 1, 50);
 8000756:	2332      	movs	r3, #50	; 0x32
 8000758:	2201      	movs	r2, #1
 800075a:	4939      	ldr	r1, [pc, #228]	; (8000840 <main+0x354>)
 800075c:	4820      	ldr	r0, [pc, #128]	; (80007e0 <main+0x2f4>)
 800075e:	f001 ffc8 	bl	80026f2 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2108      	movs	r1, #8
 8000766:	481b      	ldr	r0, [pc, #108]	; (80007d4 <main+0x2e8>)
 8000768:	f001 f968 	bl	8001a3c <HAL_GPIO_WritePin>
		 newz= bigZ & 0xf0;
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <main+0x350>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f023 030f 	bic.w	r3, r3, #15
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b33      	ldr	r3, [pc, #204]	; (8000844 <main+0x358>)
 8000778:	701a      	strb	r2, [r3, #0]
	}

	//Se encienden LEDs si se ha movido
	if(newx != basex && flagbase==true ){
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <main+0x30c>)
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <main+0x310>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d00f      	beq.n	80007a6 <main+0x2ba>
 8000786:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <main+0x308>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <main+0x2ba>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000796:	482c      	ldr	r0, [pc, #176]	; (8000848 <main+0x35c>)
 8000798:	f001 f950 	bl	8001a3c <HAL_GPIO_WritePin>
		lastX= HAL_GetTick();
 800079c:	f000 fc32 	bl	8001004 <HAL_GetTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <main+0x360>)
 80007a4:	6013      	str	r3, [r2, #0]
	}
	if(newy != basey && flagbase==true){
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <main+0x348>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <main+0x314>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d050      	beq.n	8000854 <main+0x368>
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <main+0x308>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d04b      	beq.n	8000854 <main+0x368>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c2:	4821      	ldr	r0, [pc, #132]	; (8000848 <main+0x35c>)
 80007c4:	f001 f93a 	bl	8001a3c <HAL_GPIO_WritePin>
		lastY= HAL_GetTick();
 80007c8:	f000 fc1c 	bl	8001004 <HAL_GetTick>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a20      	ldr	r2, [pc, #128]	; (8000850 <main+0x364>)
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e03f      	b.n	8000854 <main+0x368>
 80007d4:	40021000 	.word	0x40021000
 80007d8:	2000011c 	.word	0x2000011c
 80007dc:	2000011b 	.word	0x2000011b
 80007e0:	20000070 	.word	0x20000070
 80007e4:	200000c8 	.word	0x200000c8
 80007e8:	20000112 	.word	0x20000112
 80007ec:	20000113 	.word	0x20000113
 80007f0:	20000114 	.word	0x20000114
 80007f4:	20000111 	.word	0x20000111
 80007f8:	20000115 	.word	0x20000115
 80007fc:	20000118 	.word	0x20000118
 8000800:	20000119 	.word	0x20000119
 8000804:	2000011a 	.word	0x2000011a
 8000808:	2000011e 	.word	0x2000011e
 800080c:	2000011d 	.word	0x2000011d
 8000810:	2000011f 	.word	0x2000011f
 8000814:	20000120 	.word	0x20000120
 8000818:	20000121 	.word	0x20000121
 800081c:	20000128 	.word	0x20000128
 8000820:	20000122 	.word	0x20000122
 8000824:	20000125 	.word	0x20000125
 8000828:	20000129 	.word	0x20000129
 800082c:	20000123 	.word	0x20000123
 8000830:	20000126 	.word	0x20000126
 8000834:	20000116 	.word	0x20000116
 8000838:	2000012a 	.word	0x2000012a
 800083c:	20000124 	.word	0x20000124
 8000840:	20000127 	.word	0x20000127
 8000844:	20000117 	.word	0x20000117
 8000848:	40020c00 	.word	0x40020c00
 800084c:	2000012c 	.word	0x2000012c
 8000850:	20000130 	.word	0x20000130
	}
	if(newz != basez && flagbase==true){
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <main+0x3cc>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <main+0x3d0>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d00f      	beq.n	8000880 <main+0x394>
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <main+0x3d4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00a      	beq.n	8000880 <main+0x394>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000870:	4814      	ldr	r0, [pc, #80]	; (80008c4 <main+0x3d8>)
 8000872:	f001 f8e3 	bl	8001a3c <HAL_GPIO_WritePin>
		lastZ= HAL_GetTick();
 8000876:	f000 fbc5 	bl	8001004 <HAL_GetTick>
 800087a:	4603      	mov	r3, r0
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <main+0x3dc>)
 800087e:	6013      	str	r3, [r2, #0]
	}

	//Se apagan los leds tras un rato
	if(flagmover == true){
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <main+0x3e0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	f43f ae68 	beq.w	800055c <main+0x70>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <main+0x3d8>)
 8000894:	f001 f8d2 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	4809      	ldr	r0, [pc, #36]	; (80008c4 <main+0x3d8>)
 80008a0:	f001 f8cc 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <main+0x3d8>)
 80008ac:	f001 f8c6 	bl	8001a3c <HAL_GPIO_WritePin>
		flagmover= false;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <main+0x3e0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	if(flagbase== true){
 80008b6:	e651      	b.n	800055c <main+0x70>
 80008b8:	20000117 	.word	0x20000117
 80008bc:	2000011a 	.word	0x2000011a
 80008c0:	20000111 	.word	0x20000111
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	20000134 	.word	0x20000134
 80008cc:	20000110 	.word	0x20000110

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 ff6c 	bl	80037bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a27      	ldr	r2, [pc, #156]	; (800099c <SystemClock_Config+0xcc>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <SystemClock_Config+0xcc>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <SystemClock_Config+0xd0>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <SystemClock_Config+0xd0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000940:	2308      	movs	r3, #8
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000944:	2332      	movs	r3, #50	; 0x32
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800094c:	2307      	movs	r3, #7
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f8a3 	bl	8001aa0 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000960:	f000 f992 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000970:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fb04 	bl	8001f90 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800098e:	f000 f97b 	bl	8000c88 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	; 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <MX_ADC1_Init+0x9c>)
 80009ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <MX_ADC1_Init+0xa0>)
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_ADC1_Init+0x98>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_ADC1_Init+0x98>)
 8000a06:	f000 fb09 	bl	800101c <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a10:	f000 f93a 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_ADC1_Init+0x98>)
 8000a26:	f000 fb3d 	bl	80010a4 <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a30:	f000 f92a 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000028 	.word	0x20000028
 8000a40:	40012000 	.word	0x40012000
 8000a44:	0f000001 	.word	0x0f000001

08000a48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_SPI1_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a7c:	2218      	movs	r2, #24
 8000a7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a9a:	f001 fc65 	bl	8002368 <HAL_SPI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aa4:	f000 f8f0 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000070 	.word	0x20000070
 8000ab0:	40013000 	.word	0x40013000

08000ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ada:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 18750;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ae8:	f644 123e 	movw	r2, #18750	; 0x493e
 8000aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afa:	4814      	ldr	r0, [pc, #80]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000afc:	f002 f9dc 	bl	8002eb8 <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b06:	f000 f8bf 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000b18:	f002 fb96 	bl	8003248 <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b22:	f000 f8b1 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000b34:	f002 fdb2 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b3e:	f000 f8a3 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000c8 	.word	0x200000c8

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a3a      	ldr	r2, [pc, #232]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a33      	ldr	r2, [pc, #204]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2c      	ldr	r2, [pc, #176]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <MX_GPIO_Init+0x108>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4827      	ldr	r0, [pc, #156]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000bc0:	f000 ff3c 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000bca:	4825      	ldr	r0, [pc, #148]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bcc:	f000 ff36 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	481d      	ldr	r0, [pc, #116]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000be8:	f000 fd8c 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bec:	2301      	movs	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4818      	ldr	r0, [pc, #96]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000c02:	f000 fd7f 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000c1c:	f000 fd72 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c20:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000c3a:	f000 fd63 	bl	8001704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2006      	movs	r0, #6
 8000c44:	f000 fd27 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c48:	2006      	movs	r0, #6
 8000c4a:	f000 fd40 	bl	80016ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4e:	bf00      	nop
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	flagbase=true;
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000111 	.word	0x20000111

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 fcd4 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_ADC_MspInit+0x7c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d127      	bne.n	8000d56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_ADC_MspInit+0x80>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <HAL_ADC_MspInit+0x80>)
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_ADC_MspInit+0x80>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_ADC_MspInit+0x80>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_ADC_MspInit+0x80>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_ADC_MspInit+0x80>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2303      	movs	r3, #3
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_ADC_MspInit+0x84>)
 8000d52:	f000 fcd7 	bl	8001704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40012000 	.word	0x40012000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_SPI_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12b      	bne.n	8000de6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_SPI_MspInit+0x88>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_SPI_MspInit+0x88>)
 8000d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_SPI_MspInit+0x88>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_SPI_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_SPI_MspInit+0x88>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_SPI_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dc6:	23e0      	movs	r3, #224	; 0xe0
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_SPI_MspInit+0x8c>)
 8000de2:	f000 fc8f 	bl	8001704 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40013000 	.word	0x40013000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e0c:	d115      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_TIM_Base_MspInit+0x48>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_TIM_Base_MspInit+0x48>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_TIM_Base_MspInit+0x48>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	201c      	movs	r0, #28
 8000e30:	f000 fc31 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e34:	201c      	movs	r0, #28
 8000e36:	f000 fc4a 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f8a2 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f000 fde5 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM2_IRQHandler+0x10>)
 8000eb2:	f002 f8c1 	bl	8003038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000c8 	.word	0x200000c8

08000ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <SystemInit+0x20>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <SystemInit+0x20>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eea:	490e      	ldr	r1, [pc, #56]	; (8000f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f00:	4c0b      	ldr	r4, [pc, #44]	; (8000f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0e:	f7ff ffd7 	bl	8000ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f12:	f002 fc5b 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f16:	f7ff fae9 	bl	80004ec <main>
  bx  lr    
 8000f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f28:	0800384c 	.word	0x0800384c
  ldr r2, =_sbss
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f30:	2000013c 	.word	0x2000013c

08000f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC_IRQHandler>
	...

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fb8d 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff fe92 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fba5 	bl	80016ea <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fb6d 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000138 	.word	0x20000138

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000138 	.word	0x20000138

0800101c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e033      	b.n	800109a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	2b00      	cmp	r3, #0
 8001038:	d109      	bne.n	800104e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fe52 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	d118      	bne.n	800108c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001062:	f023 0302 	bic.w	r3, r3, #2
 8001066:	f043 0202 	orr.w	r2, r3, #2
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f93a 	bl	80012e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f023 0303 	bic.w	r3, r3, #3
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
 800108a:	e001      	b.n	8001090 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1c>
 80010bc:	2302      	movs	r3, #2
 80010be:	e105      	b.n	80012cc <HAL_ADC_ConfigChannel+0x228>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	d925      	bls.n	800111c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68d9      	ldr	r1, [r3, #12]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	3b1e      	subs	r3, #30
 80010e6:	2207      	movs	r2, #7
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43da      	mvns	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	400a      	ands	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68d9      	ldr	r1, [r3, #12]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	4603      	mov	r3, r0
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4403      	add	r3, r0
 800110e:	3b1e      	subs	r3, #30
 8001110:	409a      	lsls	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	e022      	b.n	8001162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6919      	ldr	r1, [r3, #16]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	2207      	movs	r2, #7
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	400a      	ands	r2, r1
 800113e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6919      	ldr	r1, [r3, #16]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	4603      	mov	r3, r0
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4403      	add	r3, r0
 8001158:	409a      	lsls	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d824      	bhi.n	80011b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	3b05      	subs	r3, #5
 800117c:	221f      	movs	r2, #31
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b05      	subs	r3, #5
 80011a6:	fa00 f203 	lsl.w	r2, r0, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
 80011b2:	e04c      	b.n	800124e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d824      	bhi.n	8001206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b23      	subs	r3, #35	; 0x23
 80011ce:	221f      	movs	r2, #31
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43da      	mvns	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	400a      	ands	r2, r1
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	3b23      	subs	r3, #35	; 0x23
 80011f8:	fa00 f203 	lsl.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
 8001204:	e023      	b.n	800124e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b41      	subs	r3, #65	; 0x41
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	400a      	ands	r2, r1
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b41      	subs	r3, #65	; 0x41
 8001242:	fa00 f203 	lsl.w	r2, r0, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_ADC_ConfigChannel+0x234>)
 8001250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <HAL_ADC_ConfigChannel+0x238>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d109      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1cc>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b12      	cmp	r3, #18
 8001262:	d105      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_ADC_ConfigChannel+0x238>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d123      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x21e>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b10      	cmp	r3, #16
 8001280:	d003      	beq.n	800128a <HAL_ADC_ConfigChannel+0x1e6>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b11      	cmp	r3, #17
 8001288:	d11b      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b10      	cmp	r3, #16
 800129c:	d111      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_ADC_ConfigChannel+0x23c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_ADC_ConfigChannel+0x240>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9a      	lsrs	r2, r3, #18
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012b4:	e002      	b.n	80012bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f9      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40012300 	.word	0x40012300
 80012dc:	40012000 	.word	0x40012000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f0:	4b79      	ldr	r3, [pc, #484]	; (80014d8 <ADC_Init+0x1f0>)
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	431a      	orrs	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800131c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	021a      	lsls	r2, r3, #8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6899      	ldr	r1, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	4a58      	ldr	r2, [pc, #352]	; (80014dc <ADC_Init+0x1f4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d022      	beq.n	80013c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800138e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6899      	ldr	r1, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e00f      	b.n	80013e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0202 	bic.w	r2, r2, #2
 80013f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6899      	ldr	r1, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e1b      	ldrb	r3, [r3, #24]
 8001400:	005a      	lsls	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01b      	beq.n	800144c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6859      	ldr	r1, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	3b01      	subs	r3, #1
 8001440:	035a      	lsls	r2, r3, #13
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	e007      	b.n	800145c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	3b01      	subs	r3, #1
 8001478:	051a      	lsls	r2, r3, #20
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6899      	ldr	r1, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149e:	025a      	lsls	r2, r3, #9
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6899      	ldr	r1, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	029a      	lsls	r2, r3, #10
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40012300 	.word	0x40012300
 80014dc:	0f000001 	.word	0x0f000001

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff29 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff3e 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff8e 	bl	80015d4 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff31 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa2 	bl	800163c <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e16b      	b.n	80019f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 815a 	bne.w	80019f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d005      	beq.n	8001756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001752:	2b02      	cmp	r3, #2
 8001754:	d130      	bne.n	80017b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 0201 	and.w	r2, r3, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d017      	beq.n	80017f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d123      	bne.n	8001848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80b4 	beq.w	80019f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b60      	ldr	r3, [pc, #384]	; (8001a10 <HAL_GPIO_Init+0x30c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a5f      	ldr	r2, [pc, #380]	; (8001a10 <HAL_GPIO_Init+0x30c>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <HAL_GPIO_Init+0x30c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a6:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <HAL_GPIO_Init+0x310>)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_GPIO_Init+0x314>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d02b      	beq.n	800192a <HAL_GPIO_Init+0x226>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_GPIO_Init+0x318>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d025      	beq.n	8001926 <HAL_GPIO_Init+0x222>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_GPIO_Init+0x31c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01f      	beq.n	8001922 <HAL_GPIO_Init+0x21e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_GPIO_Init+0x320>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x21a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4e      	ldr	r2, [pc, #312]	; (8001a28 <HAL_GPIO_Init+0x324>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x216>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4d      	ldr	r2, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x328>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x212>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_GPIO_Init+0x32c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x20e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <HAL_GPIO_Init+0x330>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x20a>
 800190a:	2307      	movs	r3, #7
 800190c:	e00e      	b.n	800192c <HAL_GPIO_Init+0x228>
 800190e:	2308      	movs	r3, #8
 8001910:	e00c      	b.n	800192c <HAL_GPIO_Init+0x228>
 8001912:	2306      	movs	r3, #6
 8001914:	e00a      	b.n	800192c <HAL_GPIO_Init+0x228>
 8001916:	2305      	movs	r3, #5
 8001918:	e008      	b.n	800192c <HAL_GPIO_Init+0x228>
 800191a:	2304      	movs	r3, #4
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x228>
 800191e:	2303      	movs	r3, #3
 8001920:	e004      	b.n	800192c <HAL_GPIO_Init+0x228>
 8001922:	2302      	movs	r3, #2
 8001924:	e002      	b.n	800192c <HAL_GPIO_Init+0x228>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x228>
 800192a:	2300      	movs	r3, #0
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f002 0203 	and.w	r2, r2, #3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4093      	lsls	r3, r2
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800193c:	4935      	ldr	r1, [pc, #212]	; (8001a14 <HAL_GPIO_Init+0x310>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_GPIO_Init+0x334>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196e:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <HAL_GPIO_Init+0x334>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_GPIO_Init+0x334>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001998:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <HAL_GPIO_Init+0x334>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x334>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c2:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_GPIO_Init+0x334>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_GPIO_Init+0x334>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <HAL_GPIO_Init+0x334>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3301      	adds	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	f67f ae90 	bls.w	8001720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40013800 	.word	0x40013800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	40021800 	.word	0x40021800
 8001a34:	40021c00 	.word	0x40021c00
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd18 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e267      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d075      	beq.n	8001baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001abe:	4b88      	ldr	r3, [pc, #544]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aca:	4b85      	ldr	r3, [pc, #532]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d112      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae2:	d10b      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4b7e      	ldr	r3, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d05b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x108>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d157      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e242      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d106      	bne.n	8001b14 <HAL_RCC_OscConfig+0x74>
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x98>
 8001b1e:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6f      	ldr	r2, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6c      	ldr	r2, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fa54 	bl	8001004 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fa50 	bl	8001004 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e207      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xc0>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fa40 	bl	8001004 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fa3c 	bl	8001004 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1f3      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b51      	ldr	r3, [pc, #324]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0xe8>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1c7      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4937      	ldr	r1, [pc, #220]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_RCC_OscConfig+0x244>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f9f5 	bl	8001004 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f9f1 	bl	8001004 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1a8      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4925      	ldr	r1, [pc, #148]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x244>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f9d4 	bl	8001004 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f9d0 	bl	8001004 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e187      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d036      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x248>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f9b4 	bl	8001004 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f9b0 	bl	8001004 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e167      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x200>
 8001cbe:	e01b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_OscConfig+0x248>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f99d 	bl	8001004 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e00e      	b.n	8001cec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff f999 	bl	8001004 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d907      	bls.n	8001cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e150      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	42470000 	.word	0x42470000
 8001ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ea      	bne.n	8001cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8097 	beq.w	8001e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a7c      	ldr	r2, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b7a      	ldr	r3, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b74      	ldr	r3, [pc, #464]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a73      	ldr	r2, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f959 	bl	8001004 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7ff f955 	bl	8001004 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e10c      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x2ea>
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a63      	ldr	r2, [pc, #396]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x324>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x30c>
 8001d92:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a5e      	ldr	r2, [pc, #376]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a5b      	ldr	r2, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x324>
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a57      	ldr	r2, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f91a 	bl	8001004 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f916 	bl	8001004 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0cb      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ee      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x334>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff f904 	bl	8001004 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f900 	bl	8001004 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0b5      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e16:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ee      	bne.n	8001e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a1 	beq.w	8001f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d05c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d141      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f8d4 	bl	8001004 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f8d0 	bl	8001004 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e087      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	491b      	ldr	r1, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff f8a9 	bl	8001004 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f8a5 	bl	8001004 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e05c      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x416>
 8001ed4:	e054      	b.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f892 	bl	8001004 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f88e 	bl	8001004 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e045      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x444>
 8001f02:	e03d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e038      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x4ec>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d028      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d121      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	3b01      	subs	r3, #1
 8001f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0cc      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d90c      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d044      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	2b03      	cmp	r3, #3
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e067      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4934      	ldr	r1, [pc, #208]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7fe ffc0 	bl	8001004 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe ffbc 	bl	8001004 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d20c      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ff20 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00
 800214c:	40023800 	.word	0x40023800
 8002150:	0800382c 	.word	0x0800382c
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002160:	b094      	sub	sp, #80	; 0x50
 8002162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
 8002168:	2300      	movs	r3, #0
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800216c:	2300      	movs	r3, #0
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002174:	4b79      	ldr	r3, [pc, #484]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d00d      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002180:	2b08      	cmp	r3, #8
 8002182:	f200 80e1 	bhi.w	8002348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x34>
 800218a:	2b04      	cmp	r3, #4
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x3a>
 800218e:	e0db      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b73      	ldr	r3, [pc, #460]	; (8002360 <HAL_RCC_GetSysClockFreq+0x204>)
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002194:	e0db      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002196:	4b73      	ldr	r3, [pc, #460]	; (8002364 <HAL_RCC_GetSysClockFreq+0x208>)
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800219a:	e0d8      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a6:	4b6d      	ldr	r3, [pc, #436]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d063      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	2200      	movs	r2, #0
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80021bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ce:	4622      	mov	r2, r4
 80021d0:	462b      	mov	r3, r5
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	0159      	lsls	r1, r3, #5
 80021dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e0:	0150      	lsls	r0, r2, #5
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4621      	mov	r1, r4
 80021e8:	1a51      	subs	r1, r2, r1
 80021ea:	6139      	str	r1, [r7, #16]
 80021ec:	4629      	mov	r1, r5
 80021ee:	eb63 0301 	sbc.w	r3, r3, r1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002200:	4659      	mov	r1, fp
 8002202:	018b      	lsls	r3, r1, #6
 8002204:	4651      	mov	r1, sl
 8002206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800220a:	4651      	mov	r1, sl
 800220c:	018a      	lsls	r2, r1, #6
 800220e:	4651      	mov	r1, sl
 8002210:	ebb2 0801 	subs.w	r8, r2, r1
 8002214:	4659      	mov	r1, fp
 8002216:	eb63 0901 	sbc.w	r9, r3, r1
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800222a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800222e:	4690      	mov	r8, r2
 8002230:	4699      	mov	r9, r3
 8002232:	4623      	mov	r3, r4
 8002234:	eb18 0303 	adds.w	r3, r8, r3
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	462b      	mov	r3, r5
 800223c:	eb49 0303 	adc.w	r3, r9, r3
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800224e:	4629      	mov	r1, r5
 8002250:	024b      	lsls	r3, r1, #9
 8002252:	4621      	mov	r1, r4
 8002254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002258:	4621      	mov	r1, r4
 800225a:	024a      	lsls	r2, r1, #9
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002262:	2200      	movs	r2, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
 8002266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800226c:	f7fd ffac 	bl	80001c8 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002278:	e058      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	2200      	movs	r2, #0
 8002282:	4618      	mov	r0, r3
 8002284:	4611      	mov	r1, r2
 8002286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002294:	4642      	mov	r2, r8
 8002296:	464b      	mov	r3, r9
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0159      	lsls	r1, r3, #5
 80022a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a6:	0150      	lsls	r0, r2, #5
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4641      	mov	r1, r8
 80022ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80022b2:	4649      	mov	r1, r9
 80022b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022cc:	ebb2 040a 	subs.w	r4, r2, sl
 80022d0:	eb63 050b 	sbc.w	r5, r3, fp
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	00eb      	lsls	r3, r5, #3
 80022de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	4643      	mov	r3, r8
 80022ea:	18e3      	adds	r3, r4, r3
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	464b      	mov	r3, r9
 80022f0:	eb45 0303 	adc.w	r3, r5, r3
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002302:	4629      	mov	r1, r5
 8002304:	028b      	lsls	r3, r1, #10
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800230c:	4621      	mov	r1, r4
 800230e:	028a      	lsls	r2, r1, #10
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	2200      	movs	r2, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	61fa      	str	r2, [r7, #28]
 800231c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002320:	f7fd ff52 	bl	80001c8 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	3301      	adds	r3, #1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800233c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002346:	e002      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetSysClockFreq+0x204>)
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800234c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002350:	4618      	mov	r0, r3
 8002352:	3750      	adds	r7, #80	; 0x50
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	00f42400 	.word	0x00f42400
 8002364:	007a1200 	.word	0x007a1200

08002368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e07b      	b.n	8002472 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800238a:	d009      	beq.n	80023a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
 8002392:	e005      	b.n	80023a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fcd6 	bl	8000d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002424:	ea42 0103 	orr.w	r1, r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	f003 0104 	and.w	r1, r3, #4
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f003 0210 	and.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b088      	sub	sp, #32
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_SPI_Transmit+0x22>
 8002498:	2302      	movs	r3, #2
 800249a:	e126      	b.n	80026ea <HAL_SPI_Transmit+0x270>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024a4:	f7fe fdae 	bl	8001004 <HAL_GetTick>
 80024a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024be:	e10b      	b.n	80026d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_SPI_Transmit+0x52>
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024d0:	e102      	b.n	80026d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2203      	movs	r2, #3
 80024d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	88fa      	ldrh	r2, [r7, #6]
 80024ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002518:	d10f      	bne.n	800253a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002528:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002538:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d007      	beq.n	8002558 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002560:	d14b      	bne.n	80025fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_SPI_Transmit+0xf6>
 800256a:	8afb      	ldrh	r3, [r7, #22]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d13e      	bne.n	80025ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	1c9a      	adds	r2, r3, #2
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002594:	e02b      	b.n	80025ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d112      	bne.n	80025ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80025c8:	e011      	b.n	80025ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ca:	f7fe fd1b 	bl	8001004 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d803      	bhi.n	80025e2 <HAL_SPI_Transmit+0x168>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d102      	bne.n	80025e8 <HAL_SPI_Transmit+0x16e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025ec:	e074      	b.n	80026d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ce      	bne.n	8002596 <HAL_SPI_Transmit+0x11c>
 80025f8:	e04c      	b.n	8002694 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_Transmit+0x18e>
 8002602:	8afb      	ldrh	r3, [r7, #22]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d140      	bne.n	800268a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800262e:	e02c      	b.n	800268a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d113      	bne.n	8002666 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
 8002664:	e011      	b.n	800268a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002666:	f7fe fccd 	bl	8001004 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d803      	bhi.n	800267e <HAL_SPI_Transmit+0x204>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d102      	bne.n	8002684 <HAL_SPI_Transmit+0x20a>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002688:	e026      	b.n	80026d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1cd      	bne.n	8002630 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fbcb 	bl	8002e34 <SPI_EndRxTxTransaction>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	77fb      	strb	r3, [r7, #31]
 80026d4:	e000      	b.n	80026d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80026d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b088      	sub	sp, #32
 80026f6:	af02      	add	r7, sp, #8
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800270e:	d112      	bne.n	8002736 <HAL_SPI_Receive+0x44>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10e      	bne.n	8002736 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2204      	movs	r2, #4
 800271c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f8f1 	bl	8002914 <HAL_SPI_TransmitReceive>
 8002732:	4603      	mov	r3, r0
 8002734:	e0ea      	b.n	800290c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_SPI_Receive+0x52>
 8002740:	2302      	movs	r3, #2
 8002742:	e0e3      	b.n	800290c <HAL_SPI_Receive+0x21a>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800274c:	f7fe fc5a 	bl	8001004 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d002      	beq.n	8002764 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002762:	e0ca      	b.n	80028fa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_SPI_Receive+0x7e>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002774:	e0c1      	b.n	80028fa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2204      	movs	r2, #4
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027bc:	d10f      	bne.n	80027de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d007      	beq.n	80027fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d162      	bne.n	80028ca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002804:	e02e      	b.n	8002864 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d115      	bne.n	8002840 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f103 020c 	add.w	r2, r3, #12
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800283e:	e011      	b.n	8002864 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002840:	f7fe fbe0 	bl	8001004 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d803      	bhi.n	8002858 <HAL_SPI_Receive+0x166>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d102      	bne.n	800285e <HAL_SPI_Receive+0x16c>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002862:	e04a      	b.n	80028fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1cb      	bne.n	8002806 <HAL_SPI_Receive+0x114>
 800286e:	e031      	b.n	80028d4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d113      	bne.n	80028a6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	b292      	uxth	r2, r2
 800288a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	1c9a      	adds	r2, r3, #2
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028a4:	e011      	b.n	80028ca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028a6:	f7fe fbad 	bl	8001004 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d803      	bhi.n	80028be <HAL_SPI_Receive+0x1cc>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d102      	bne.n	80028c4 <HAL_SPI_Receive+0x1d2>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028c8:	e017      	b.n	80028fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1cd      	bne.n	8002870 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fa45 	bl	8002d68 <SPI_EndRxTransaction>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
 80028f6:	e000      	b.n	80028fa <HAL_SPI_Receive+0x208>
  }

error :
 80028f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800290a:	7dfb      	ldrb	r3, [r7, #23]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	; 0x30
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002922:	2301      	movs	r3, #1
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_SPI_TransmitReceive+0x26>
 8002936:	2302      	movs	r3, #2
 8002938:	e18a      	b.n	8002c50 <HAL_SPI_TransmitReceive+0x33c>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002942:	f7fe fb5f 	bl	8001004 <HAL_GetTick>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800295c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002960:	2b01      	cmp	r3, #1
 8002962:	d00f      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x70>
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800296a:	d107      	bne.n	800297c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <HAL_SPI_TransmitReceive+0x68>
 8002974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002978:	2b04      	cmp	r3, #4
 800297a:	d003      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800297c:	2302      	movs	r3, #2
 800297e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002982:	e15b      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x82>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x82>
 8002990:	887b      	ldrh	r3, [r7, #2]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800299c:	e14e      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d003      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2205      	movs	r2, #5
 80029ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	887a      	ldrh	r2, [r7, #2]
 80029c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d007      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0e:	d178      	bne.n	8002b02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_SPI_TransmitReceive+0x10a>
 8002a18:	8b7b      	ldrh	r3, [r7, #26]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d166      	bne.n	8002aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	881a      	ldrh	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	1c9a      	adds	r2, r3, #2
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a42:	e053      	b.n	8002aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d11b      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x176>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d016      	beq.n	8002a8a <HAL_SPI_TransmitReceive+0x176>
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d113      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	1c9a      	adds	r2, r3, #2
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d119      	bne.n	8002acc <HAL_SPI_TransmitReceive+0x1b8>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d014      	beq.n	8002acc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	b292      	uxth	r2, r2
 8002aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002acc:	f7fe fa9a 	bl	8001004 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d807      	bhi.n	8002aec <HAL_SPI_TransmitReceive+0x1d8>
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d003      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aea:	e0a7      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1a6      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x130>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1a1      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x130>
 8002b00:	e07c      	b.n	8002bfc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_TransmitReceive+0x1fc>
 8002b0a:	8b7b      	ldrh	r3, [r7, #26]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d16b      	bne.n	8002be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b36:	e057      	b.n	8002be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d11c      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x26c>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x26c>
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d114      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d119      	bne.n	8002bc2 <HAL_SPI_TransmitReceive+0x2ae>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bc2:	f7fe fa1f 	bl	8001004 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d803      	bhi.n	8002bda <HAL_SPI_TransmitReceive+0x2c6>
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d102      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x2cc>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d103      	bne.n	8002be8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002be6:	e029      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1a2      	bne.n	8002b38 <HAL_SPI_TransmitReceive+0x224>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d19d      	bne.n	8002b38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f917 	bl	8002e34 <SPI_EndRxTxTransaction>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002c18:	e010      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10b      	bne.n	8002c3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	e000      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c68:	f7fe f9cc 	bl	8001004 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c78:	f7fe f9c4 	bl	8001004 <HAL_GetTick>
 8002c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8e:	e054      	b.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d050      	beq.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c98:	f7fe f9b4 	bl	8001004 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d902      	bls.n	8002cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d13d      	bne.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc6:	d111      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd0:	d004      	beq.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d107      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf4:	d10f      	bne.n	8002d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e017      	b.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d19b      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000000 	.word	0x20000000

08002d68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7c:	d111      	bne.n	8002da2 <SPI_EndRxTransaction+0x3a>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d86:	d004      	beq.n	8002d92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d90:	d107      	bne.n	8002da2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d12a      	bne.n	8002e02 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db4:	d012      	beq.n	8002ddc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff ff49 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02d      	beq.n	8002e28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e026      	b.n	8002e2a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2101      	movs	r1, #1
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ff36 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01a      	beq.n	8002e28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e013      	b.n	8002e2a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff23 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e000      	b.n	8002e2a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <SPI_EndRxTxTransaction+0x7c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <SPI_EndRxTxTransaction+0x80>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0d5b      	lsrs	r3, r3, #21
 8002e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5e:	d112      	bne.n	8002e86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff fef4 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e00f      	b.n	8002ea6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d0f2      	beq.n	8002e86 <SPI_EndRxTxTransaction+0x52>
 8002ea0:	e000      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ea2:	bf00      	nop
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	165e9f81 	.word	0x165e9f81

08002eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e041      	b.n	8002f4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd ff8c 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f000 fa96 	bl	8003428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d001      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e04e      	b.n	800300e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_TIM_Base_Start_IT+0xc4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d010      	beq.n	800300c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	e007      	b.n	800300c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40010400 	.word	0x40010400
 8003030:	40014000 	.word	0x40014000
 8003034:	40001800 	.word	0x40001800

08003038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0202 	mvn.w	r2, #2
 8003064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f9b5 	bl	80033ea <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9a7 	bl	80033d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f9b8 	bl	80033fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d122      	bne.n	80030e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d11b      	bne.n	80030e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0204 	mvn.w	r2, #4
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f98b 	bl	80033ea <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f97d 	bl	80033d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f98e 	bl	80033fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d122      	bne.n	800313c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b08      	cmp	r3, #8
 8003102:	d11b      	bne.n	800313c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0208 	mvn.w	r2, #8
 800310c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2204      	movs	r2, #4
 8003112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f961 	bl	80033ea <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f953 	bl	80033d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f964 	bl	80033fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b10      	cmp	r3, #16
 8003148:	d122      	bne.n	8003190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b10      	cmp	r3, #16
 8003156:	d11b      	bne.n	8003190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0210 	mvn.w	r2, #16
 8003160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2208      	movs	r2, #8
 8003166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f937 	bl	80033ea <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f929 	bl	80033d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f93a 	bl	80033fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0201 	mvn.w	r2, #1
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fd56 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d10e      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fae0 	bl	80037a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d10e      	bne.n	8003214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d107      	bne.n	8003214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8ff 	bl	8003412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b20      	cmp	r3, #32
 8003220:	d10e      	bne.n	8003240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b20      	cmp	r3, #32
 800322e:	d107      	bne.n	8003240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0220 	mvn.w	r2, #32
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 faaa 	bl	8003794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_TIM_ConfigClockSource+0x1c>
 8003260:	2302      	movs	r3, #2
 8003262:	e0b4      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x186>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800328a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329c:	d03e      	beq.n	800331c <HAL_TIM_ConfigClockSource+0xd4>
 800329e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a2:	f200 8087 	bhi.w	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032aa:	f000 8086 	beq.w	80033ba <HAL_TIM_ConfigClockSource+0x172>
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b2:	d87f      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b70      	cmp	r3, #112	; 0x70
 80032b6:	d01a      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0xa6>
 80032b8:	2b70      	cmp	r3, #112	; 0x70
 80032ba:	d87b      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b60      	cmp	r3, #96	; 0x60
 80032be:	d050      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x11a>
 80032c0:	2b60      	cmp	r3, #96	; 0x60
 80032c2:	d877      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b50      	cmp	r3, #80	; 0x50
 80032c6:	d03c      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0xfa>
 80032c8:	2b50      	cmp	r3, #80	; 0x50
 80032ca:	d873      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d058      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x13a>
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d86f      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d064      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x15a>
 80032d8:	2b30      	cmp	r3, #48	; 0x30
 80032da:	d86b      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d060      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x15a>
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d867      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d05c      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x15a>
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d05a      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x15a>
 80032ec:	e062      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f000 f9ad 	bl	800365c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	609a      	str	r2, [r3, #8]
      break;
 800331a:	e04f      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6899      	ldr	r1, [r3, #8]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f000 f996 	bl	800365c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333e:	609a      	str	r2, [r3, #8]
      break;
 8003340:	e03c      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	461a      	mov	r2, r3
 8003350:	f000 f90a 	bl	8003568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2150      	movs	r1, #80	; 0x50
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f963 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8003360:	e02c      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	461a      	mov	r2, r3
 8003370:	f000 f929 	bl	80035c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2160      	movs	r1, #96	; 0x60
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f953 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8003380:	e01c      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	461a      	mov	r2, r3
 8003390:	f000 f8ea 	bl	8003568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2140      	movs	r1, #64	; 0x40
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f943 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 80033a0:	e00c      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f000 f93a 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 80033b2:	e003      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      break;
 80033b8:	e000      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <TIM_Base_SetConfig+0x114>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d00f      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3d      	ldr	r2, [pc, #244]	; (8003540 <TIM_Base_SetConfig+0x118>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00b      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <TIM_Base_SetConfig+0x11c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <TIM_Base_SetConfig+0x120>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3a      	ldr	r2, [pc, #232]	; (800354c <TIM_Base_SetConfig+0x124>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d108      	bne.n	800347a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2f      	ldr	r2, [pc, #188]	; (800353c <TIM_Base_SetConfig+0x114>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d02b      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003488:	d027      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <TIM_Base_SetConfig+0x118>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d023      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <TIM_Base_SetConfig+0x11c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01f      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <TIM_Base_SetConfig+0x120>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01b      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a29      	ldr	r2, [pc, #164]	; (800354c <TIM_Base_SetConfig+0x124>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d017      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <TIM_Base_SetConfig+0x128>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a27      	ldr	r2, [pc, #156]	; (8003554 <TIM_Base_SetConfig+0x12c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00f      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <TIM_Base_SetConfig+0x130>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a25      	ldr	r2, [pc, #148]	; (800355c <TIM_Base_SetConfig+0x134>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <TIM_Base_SetConfig+0x138>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a23      	ldr	r2, [pc, #140]	; (8003564 <TIM_Base_SetConfig+0x13c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <TIM_Base_SetConfig+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0xf8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <TIM_Base_SetConfig+0x124>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d103      	bne.n	8003528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	615a      	str	r2, [r3, #20]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40010400 	.word	0x40010400
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800
 800355c:	40001800 	.word	0x40001800
 8003560:	40001c00 	.word	0x40001c00
 8003564:	40002000 	.word	0x40002000

08003568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 030a 	bic.w	r3, r3, #10
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f023 0210 	bic.w	r2, r3, #16
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	031b      	lsls	r3, r3, #12
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003602:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	f043 0307 	orr.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	021a      	lsls	r2, r3, #8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	431a      	orrs	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4313      	orrs	r3, r2
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	609a      	str	r2, [r3, #8]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e05a      	b.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a21      	ldr	r2, [pc, #132]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d01d      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10c      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40010400 	.word	0x40010400
 800378c:	40014000 	.word	0x40014000
 8003790:	40001800 	.word	0x40001800

08003794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <memset>:
 80037bc:	4402      	add	r2, r0
 80037be:	4603      	mov	r3, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <memset+0xa>
 80037c4:	4770      	bx	lr
 80037c6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ca:	e7f9      	b.n	80037c0 <memset+0x4>

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	; (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	; (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	; (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 f818 	bl	8003814 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08003844 	.word	0x08003844
 8003808:	08003844 	.word	0x08003844
 800380c:	08003844 	.word	0x08003844
 8003810:	08003848 	.word	0x08003848

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
